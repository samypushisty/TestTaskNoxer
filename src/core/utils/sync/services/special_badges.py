from sqlalchemy.orm import Session
from typing import List, Dict
from core.database.base import ProjectBadge
from sqlalchemy.exc import SQLAlchemyError, DataError, IntegrityError


def sync_special_badges(session: Session, badges_data: List[Dict]) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–µ–π–¥–∂–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    changes = []
    for badge_data in badges_data:
        try:
            badge_id = badge_data["id"]
            existing = session.get(ProjectBadge, badge_id)

            if existing:
                # Check for changes
                if existing.description != badge_data["description"]:
                    changes.append(f"  üìå Badge #{badge_id} description updated")
                    existing.description = badge_data["description"]
                # ... other fields
            else:
                new_badge = ProjectBadge(
                    id=badge_id,
                    description=badge_data["description"],
                    image_url=badge_data["image_url"],
                    meaning_tag=badge_data["meaning_tag"],
                    url=badge_data["url"],
                    sort_order=badge_data["sort_order"]
                )
                session.add(new_badge)
                changes.append(f"  ‚ûï New badge #{badge_id} '{badge_data['description']}' added")
        except KeyError as e:
            changes.append(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –±–µ–π–¥–∂: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {str(e)}")
        except (DataError, IntegrityError) as e:
            session.rollback()
            changes.append(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ–π–¥–∂–∞: {str(e)}")
        except Exception as e:
            changes.append(f"  ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ–π–¥–∂–∞: {str(e)}")

    try:
        session.commit()
        return f"üìå Badges sync complete:\n" + ("\n".join(changes) if changes else "  No changes detected")
    except (IntegrityError, DataError) as e:
        session.rollback()
        return f"üìå Badges sync failed: Database error - {str(e)}"
    except SQLAlchemyError as e:
        session.rollback()
        return f"üìå Badges sync failed: Database connection error - {str(e)}"
    except Exception as e:
        session.rollback()
        return f"üìå Badges sync failed: Unexpected error - {str(e)}"